name: Load SQL Data to PostgreSQL

on:
  workflow_dispatch:
    inputs:
      sql_file:
        description: 'SQL file to execute (without .sql extension)'
        required: false
        default: 'all'
        type: choice
        options:
          - schema
          - data
          - all
  push:
    branches:
      - main
    paths:
      - 'sql/**'

jobs:
  load-sql-data:
    runs-on: ubuntu-latest
    
    steps:
    # 1. Clonar el repositorio dentro del runner (automático con actions/checkout)
    - name: Checkout code
      uses: actions/checkout@v4
      
    # 2. Conectarse a EC2 vía SSH y ejecutar todo el flujo
    - name: Load SQL Data to PostgreSQL
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Verificar que PostgreSQL esté corriendo
          if ! docker ps | grep -q postgresql-dev; then
            echo "Error: PostgreSQL container 'postgresql-dev' is not running"
            echo "Please run the 'Deploy PostgreSQL to EC2' workflow first"
            exit 1
          fi
          
          echo "PostgreSQL container is running"
          docker ps -f name=postgresql-dev
          
    # 3. Copiar archivos SQL del runner a EC2
    - name: Copy SQL files to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "./sql/"
        target: "~/sql_temp/"
        strip_components: 0
        
    # 4. Copiar archivos al contenedor y ejecutarlos
    - name: Execute SQL files in PostgreSQL container
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "=== Copiando archivos SQL al contenedor ==="
          
          # 3. Copiar archivos SQL al contenedor: docker cp <ruta_local> <contenedor>:/ruta_en_contenedor
          docker cp ~/sql_temp/sql/schema.sql postgresql-dev:/tmp/schema.sql
          docker cp ~/sql_temp/sql/data.sql postgresql-dev:/tmp/data.sql
          
          # Verificar que los archivos se copiaron correctamente
          echo "Archivos SQL en el contenedor:"
          docker exec postgresql-dev ls -la /tmp/*.sql
          
          echo "=== Ejecutando archivos SQL ==="
          
          # Función para ejecutar archivos SQL
          execute_sql_file() {
            local file=$1
            local container_path="/tmp/$file"
            
            echo "Ejecutando archivo SQL: $file"
            
            if docker exec postgresql-dev test -f "$container_path"; then
              # 4. Ejecutar archivo dentro del contenedor: docker exec -i <contenedor> psql -U <usuario> -d <db> -f <archivo>
              docker exec -i postgresql-dev psql \
                -U ${{ secrets.POSTGRES_USER }} \
                -d ${{ secrets.POSTGRES_DB }} \
                -f "$container_path"
              echo "✅ Archivo $file ejecutado exitosamente"
            else
              echo "⚠️  Archivo $file no encontrado en $container_path"
            fi
          }
          
          # Determinar qué archivos ejecutar basado en el input
          case "${{ github.event.inputs.sql_file || 'all' }}" in
            "schema")
              execute_sql_file "schema.sql"
              ;;
            "data")
              execute_sql_file "data.sql"
              ;;
            "all"|*)
              # Ejecutar en orden: schema primero, luego data
              execute_sql_file "schema.sql"
              execute_sql_file "data.sql"
              ;;
          esac
          
          echo "=== Verificando carga de datos ==="
          
          # Listar todas las tablas
          echo "Tablas en la base de datos:"
          docker exec postgresql-dev psql \
            -U ${{ secrets.POSTGRES_USER }} \
            -d ${{ secrets.POSTGRES_DB }} \
            -c "\dt"
          
          # Si existe la tabla estudiantes, mostrar algunos datos
          if docker exec postgresql-dev psql -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }} -c "\dt" | grep -q estudiantes; then
            echo "Datos en la tabla estudiantes:"
            docker exec postgresql-dev psql \
              -U ${{ secrets.POSTGRES_USER }} \
              -d ${{ secrets.POSTGRES_DB }} \
              -c "SELECT * FROM estudiantes LIMIT 5;"
          fi
          
          # Limpiar archivos temporales
          rm -rf ~/sql_temp
          echo "Archivos temporales limpiados" 